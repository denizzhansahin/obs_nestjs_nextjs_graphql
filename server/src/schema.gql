# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CourseInstructors {
  id: Int!
  course: Courses
  instructor: Instructors
  assigned_date: String!
}

type Courses {
  id: Int!
  name: String!
  code: String!
  description: String!
  credit: Int!
  semester: String!
  created_at: DateTime!
  updated_at: DateTime!
  enrollments: [Enrollments!]!
  courseInstructors: [CourseInstructors!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Grades {
  id: Float
  grade_type: String!
  grade_value: Float!
  created_at: DateTime
  updated_at: DateTime
  enrollments: Enrollments!
}

type Enrollments {
  id: Float
  enrollment_date: DateTime
  status: String
  created_at: DateTime
  updated_at: DateTime
  course: Courses
  students: [Student!]
  grades: [Grades!]!
  academician: Instructors
}

type Student {
  userId: Int!
  first_name: String!
  last_name: String!
  email: String!
  phone: String!
  birth_date: DateTime!
  enrollment_date: DateTime!
  status: String!
  created_at: DateTime!
  updated_at: DateTime!
  user: User!
  enrollments: [Enrollments!]
}

type User {
  id: Int!
  username: String!
  password: String!
  role: String!
  created_at: DateTime!
  updated_at: DateTime!
  student: Student
  instructors: Instructors
}

type Instructors {
  userId: Int!
  first_name: String!
  last_name: String!
  email: String!
  phone: String!
  department: String!
  birth_date: DateTime!
  enrollment_date: DateTime!
  created_at: DateTime!
  updated_at: DateTime!
  user: User!
  courseInstructors: [CourseInstructors!]!
  enrollments: [Enrollments!]
}

type Query {
  getUsers: [User!]!
  getStudents: [Student!]!
  getInstructors: [Instructors!]!
  getCourses: [Courses!]!
  getEnrollments: [Enrollments!]!
  getAllGrades: [Grades!]!
  getAllCourseInstructors: [CourseInstructors!]!
}

type Mutation {
  createUser(createdUserData: CreateUserDto!): User!
  updateUser(userId: Float!, updateUserData: UpdateUserDto!): User!
  createStudent(createdStudentData: CreateStudentDto!): Student!
  updateStudent(userId: Float!, updateStudentData: UpdateStudentDto!): Student!
  createInstructors(createdInstructorsData: CreateInstructorDto!): Instructors!
  updateInstructors(userId: Float!, updateInstructorsData: UpdateInstructorDto!): Instructors!
  createCourses(createdCoursesData: CreateCoursesDto!): Courses!
  updateCourses(id: Float!, updateCourseData: UpdateCoursesDto!): Courses!
  createEnrollments(createdEnrollmentsData: CreateEnrollmentsDto!): Enrollments!
  updateEnrollments(id: Float!, updateEnrollmentsData: UpdateEnrollmentsDto!): Enrollments!
  updateEnrollments_kisitli(id: Float!, updateEnrollmentsData: UpdateEnrollmentsDto!): Enrollments!
  createGrade(createGradeInput: CreateGradesDto!): Grades!
  createCourseInstructor(createCourseInstructorDto: CreateCourseInstructorDto!): CourseInstructors!
  updateCourseInstructor(updateCourseInstructorDto: UpdateCourseInstructorDto!): CourseInstructors!
}

input CreateUserDto {
  username: String!
  password: String!
  role: String!
}

input UpdateUserDto {
  username: String
  password: String
  role: String
}

input CreateStudentDto {
  userId: Int!
  first_name: String!
  last_name: String!
  email: String!
  phone: String!
  birth_date: DateTime
  enrollment_date: DateTime
  status: String!
}

input UpdateStudentDto {
  first_name: String
  last_name: String
  email: String
  phone: String
  birth_date: DateTime
  enrollment_date: DateTime
  status: String
}

input CreateInstructorDto {
  userId: Int!
  first_name: String!
  last_name: String!
  email: String!
  phone: String!
  department: String!
  birth_date: DateTime
  enrollment_date: DateTime
}

input UpdateInstructorDto {
  first_name: String
  last_name: String
  email: String
  phone: String
  department: String
  birth_date: DateTime
  enrollment_date: DateTime
}

input CreateCoursesDto {
  name: String!
  code: String!
  description: String!
  credit: Float!
  semester: String!
}

input UpdateCoursesDto {
  name: String
  code: String
  description: String
  credit: Float
  semester: String
}

input CreateEnrollmentsDto {
  student_id: Int!
  course_id: Int!
  enrollment_date: DateTime
  status: String!
  academician_id: Int
}

input UpdateEnrollmentsDto {
  course_id: Float
  student_id: Float
  enrollment_date: DateTime
  status: String
  academician_id: Int
}

input CreateGradesDto {
  enrollment_id: Int!
  grade_value: Int!
  grade_type: String!
}

input CreateCourseInstructorDto {
  courseId: Int!
  instructorId: Int!
  assigned_date: String!
}

input UpdateCourseInstructorDto {
  courseId: Float
  id: Float
  instructorId: Float
  assigned_date: String
}